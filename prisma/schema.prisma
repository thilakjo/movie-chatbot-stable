generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]

  // --- UPDATED CUSTOM FIELDS ---
  onboardingStep  String      @default("NEEDS_INITIAL_SURVEY")
  preferences     Json?
  movieRatings    Json?
  movies          UserMovie[] // Relation to the new UserMovie table
}

// --- NEW TABLE to track Watchlist/Watched status ---
model UserMovie {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieTitle String
  status     String // Can be "WATCHLIST" or "WATCHED"
  rating     Int?     // User's rating after watching (e.g., 1-5)
  feedback   Json?    // For storing answers to follow-up questions
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, movieTitle]) // Ensures a movie is only on one list per user
}

// --- DEFAULT NEXTAUTH.JS MODELS ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}